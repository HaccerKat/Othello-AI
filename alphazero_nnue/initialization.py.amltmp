import torch.nn.functional as F
import torch

# ----------------------------------------- INITIALIZATION -----------------------------------------
class NeuralNetwork(torch.nn.Module):
    # Need to experiment to find a better NN structure
    def __init__(self):
        super().__init__()
        self.shared = torch.nn.Linear(128, 256)
        self.policy_hidden1 = torch.nn.Linear(256, 256)
        self.policy_hidden2 = torch.nn.Linear(256, 128)
        self.policy = torch.nn.Linear(128, 64)

        self.value_hidden1 = torch.nn.Linear(256, 128)
        self.value = torch.nn.Linear(128, 1)

    def forward(self, x):
        x = F.relu(self.shared(x))
        y = x
        x = F.relu(self.policy_hidden1(x))
        x = F.relu(self.policy_hidden2(x))
        policy = self.policy(x)

        y = F.relu(self.value_hidden1(y))
        value = F.tanh(self.value(y))
        return policy, value

class Dataset(torch.utils.data.Dataset):
    def __init__(self, inputs_uint8, policy, value, transform = None):
        self.inputs_uint8 = inputs_uint8
        self.policy = policy
        self.value = value
        self.transform = transform

    def __len__(self):
        return len(self.inputs_uint8)

    def __getitem__(self, idx):
        inputs = self.inputs_uint8[idx].clone().detach().float()
        policy = self.policy[idx].clone().detach()
        value = self.value[idx].clone().detach()
        if self.transform:
            inputs = self.transform(inputs)

        return inputs, policy, value
